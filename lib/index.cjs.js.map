{"version":3,"file":"index.cjs.js","sources":["../src/is-image.ts","../src/_sharpify.ts","../src/sharpify.ts"],"sourcesContent":["import { readChunk } from 'read-chunk'\n\nimport imageType, { minimumBytes } from 'image-type'\n\nexport default async function (filePath): Promise<boolean> {\n  try {\n    const buffer = await readChunk(filePath, { length: minimumBytes })\n    const type = await imageType(buffer)\n    return ['image/jpeg', 'image/png'].includes(type?.mime ?? '')\n  } catch (e) {\n    return false\n  }\n}\n","import sharp from 'sharp'\nimport isNumber from 'is-number'\n\nimport fs from 'fs'\nconst fsp = fs.promises\n\nimport isImage from './is-image'\nimport { SharpifyParameters } from './types'\n\n// we only ever render the same image once.. no need to cache\nsharp.cache(false)\n\nexport default async (source: string, target: string, args: SharpifyParameters, callback) => {\n  try {\n    const results = await _apply(source, target, args)\n    callback(null, results)\n  } catch (e) {\n    callback(e.message)\n  }\n}\n\nasync function _apply(source: string, target: string, args: SharpifyParameters) {\n  const blur = assertIntegerValue(args.blur, 0, 100)\n  const brightness = assertIntegerValue(args.brightness, 0, 2)\n  const fit = args.fit\n  const height = assertIntegerValue(args.height, 0, args.height)\n  const normalise = args.normalise\n  const rotate = assertIntegerValue(args.rotate, -20, 20)\n  const saturation = assertIntegerValue(args.saturation, 0, 1)\n  const width = assertIntegerValue(args.width, 0, args.width)\n  const withMetadata = args.withMetadata\n  const withoutEnlargement = args.withoutEnlargement\n\n  let s = await sharp(source)\n\n  if (withMetadata) {\n    s = s.withMetadata()\n  }\n\n  const metadata = await s.metadata()\n\n  const originalWidth = metadata.width\n  const originalHeight = metadata.height\n\n  if (normalise) {\n    // normalise seems to have minimal effect\n    s = s.normalise()\n  }\n\n  if (isNumber(blur) && blur > 0) {\n    s = s.blur(blur)\n  }\n\n  if (isNumber(saturation) && saturation < 1) {\n    s = s.modulate({ saturation })\n  }\n\n  if (isNumber(brightness) && brightness != 1) {\n    s = s.modulate({ brightness })\n  }\n\n  if (rotate !== 0) {\n    // this doesnt take the orientation into account :(\n    // https://sharp.pixelplumbing.com/api-operation#rotate\n    s = s.rotate(rotate)\n\n    const box = boxify(originalWidth, originalHeight, rotate)\n\n    s = s.extract({\n      left: box.left,\n      top: box.top,\n      width: box.width,\n      height: box.height,\n    })\n  } else {\n    // this normalises rotation - see sharp docs\n    s = s.rotate()\n  }\n\n  if (width || height) {\n    s = s.resize({\n      width,\n      height,\n      fit,\n      withoutEnlargement,\n    })\n  }\n\n  await s.toFile(target)\n\n  if (await isImage(target)) {\n    // all good! exit gracefully\n    return target\n  } else {\n    throw new Error('Invalid target generated.')\n  }\n}\n\nfunction assertIntegerValue(value, min, max): number | null {\n  if (isNumber(value)) {\n    return Math.min(max, Math.max(min, value))\n  } else {\n    return null\n  }\n}\n\nfunction radians(degrees): number {\n  return (degrees * Math.PI) / 180\n}\n\nfunction boxify(width, height, degrees) {\n  const rads = radians(Math.abs(degrees))\n\n  const sine = Math.sin(rads)\n  const cosine = Math.cos(rads)\n\n  let left = height * sine\n  let top = width * sine\n\n  const bigWidth = height * sine + width * cosine\n  const bigHeight = height * cosine + width * sine\n\n  let newWidth = bigWidth - 2 * left\n  let newHeight = bigHeight - 2 * top\n\n  const originalAspectRatio = width / height\n  const newAspectRatio = newWidth / newHeight\n\n  if (originalAspectRatio < newAspectRatio) {\n    const newWidthConstrained = originalAspectRatio * newHeight\n\n    left = left + (newWidth - newWidthConstrained) / 2\n    newWidth = newWidthConstrained\n  } else {\n    // taller\n    const newHeightConstrained = newWidth / originalAspectRatio\n\n    top = top + (newHeight - newHeightConstrained) / 2\n    newHeight = newHeightConstrained\n  }\n\n  return {\n    left: Math.round(left),\n    top: Math.round(top),\n    width: Math.round(newWidth),\n    height: Math.round(newHeight),\n    aspectRatio: newWidth / newHeight,\n  }\n}\n","import Semaphore from '@chriscdn/promise-semaphore'\nimport { SharpifyParameters } from './types'\nimport sharpifyIt from './_sharpify'\n\nconst semaphore = new Semaphore()\n\nconst defaultArgs: SharpifyParameters = {\n  blur: 0,\n  brightness: 1,\n  fit: 'inside',\n  height: null,\n  normalise: false,\n  rotate: 0,\n  saturation: 1,\n  width: null,\n  withMetadata: false,\n  withoutEnlargement: true,\n}\n\nexport default async (source: string, target: string, params: Partial<SharpifyParameters>) => {\n  const args = {\n    ...defaultArgs,\n    ...params,\n  }\n\n  await semaphore.acquire(target)\n\n  return new Promise((resolve, reject) => {\n    sharpifyIt(source, target, args, (err, target) => {\n      if (err) {\n        reject(err)\n      } else {\n        resolve(target)\n      }\n    })\n  }).finally(() => semaphore.release(target))\n}\n"],"names":["readChunk","minimumBytes","target"],"mappings":"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"}